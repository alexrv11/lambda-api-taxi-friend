// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "taxifriend/models"

// IDriver is an autogenerated mock type for the IDriver type
type IDriver struct {
	mock.Mock
}

// Create provides a mock function with given fields: driver
func (_m *IDriver) Create(driver *models.Driver) error {
	ret := _m.Called(driver)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Driver) error); ok {
		r0 = rf(driver)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDriverLocations provides a mock function with given fields:
func (_m *IDriver) GetDriverLocations() ([]models.DriverLocation, error) {
	ret := _m.Called()

	var r0 []models.DriverLocation
	if rf, ok := ret.Get(0).(func() []models.DriverLocation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DriverLocation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItem provides a mock function with given fields: driverID
func (_m *IDriver) GetItem(driverID string) (*models.Driver, error) {
	ret := _m.Called(driverID)

	var r0 *models.Driver
	if rf, ok := ret.Get(0).(func(string) *models.Driver); ok {
		r0 = rf(driverID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Driver)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(driverID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLocation provides a mock function with given fields: driverID, location
func (_m *IDriver) UpdateLocation(driverID string, location *models.Location) error {
	ret := _m.Called(driverID, location)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *models.Location) error); ok {
		r0 = rf(driverID, location)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
